{"componentChunkName":"component---node-modules-smooth-doc-src-templates-page-js","path":"/","result":{"data":{"mdx":{"fields":{"title":""},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(React.Fragment, null, mdx(HeroSection, {\n    mdxType: \"HeroSection\"\n  }, mdx(Hero, {\n    backgroundImageURL: heroBackgroundImageURL,\n    mdxType: \"Hero\"\n  }, mdx(HeroBody, {\n    mdxType: \"HeroBody\"\n  }, mdx(HeroTitle, {\n    mdxType: \"HeroTitle\"\n  }, \"async-selector-kit\"), mdx(HeroTeaser, {\n    mdxType: \"HeroTeaser\"\n  }, \"Redux async selectors focused on dev happiness and performance.\"), mdx(HeroActionList, {\n    mdxType: \"HeroActionList\"\n  }, mdx(HeroAction, {\n    mdxType: \"HeroAction\"\n  }, mdx(Button, {\n    variant: \"neutral\",\n    forwardedAs: \"a\",\n    href: \"/docs/\",\n    mdxType: \"Button\"\n  }, \"Browse Docs\")))))), mdx(FeatureSection, {\n    mdxType: \"FeatureSection\"\n  }, mdx(FeatureList, {\n    mdxType: \"FeatureList\"\n  }, mdx(Feature, {\n    mdxType: \"Feature\"\n  }, mdx(FeatureTitle, {\n    mdxType: \"FeatureTitle\"\n  }, \"Selectors\"), mdx(FeatureText, {\n    mdxType: \"FeatureText\"\n  }, \"Async selectors use reselect to reduce re-renders as well as fetch data when the dependency changes. Throttle and cache them too!\")), mdx(Feature, {\n    mdxType: \"Feature\"\n  }, mdx(FeatureTitle, {\n    mdxType: \"FeatureTitle\"\n  }, \"Actions\"), mdx(FeatureText, {\n    mdxType: \"FeatureText\"\n  }, \"Fire off actions / commands for your async-effects like submitting data or long running tasks.\")), mdx(Feature, {\n    mdxType: \"Feature\"\n  }, mdx(FeatureTitle, {\n    mdxType: \"FeatureTitle\"\n  }, \"Flexibility\"), mdx(FeatureText, {\n    mdxType: \"FeatureText\"\n  }, \"Store your data in Redux or keep them in selectors, whichever is easiest for you.\")), mdx(Feature, {\n    mdxType: \"Feature\"\n  }, mdx(FeatureTitle, {\n    mdxType: \"FeatureTitle\"\n  }, \"Developer Happiness\"), mdx(FeatureText, {\n    mdxType: \"FeatureText\"\n  }, \"No ceremony or complex setup; define your async API call, wrap in a selector, and you get instant loading / error / data.\"))))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"832362a5-dbb8-5958-8017-22357cf05899"}},"staticQueryHashes":["1022386572","1122327541","2140385554","3442269102","3597609067"]}