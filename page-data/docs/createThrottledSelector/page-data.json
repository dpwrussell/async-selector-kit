{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/createThrottledSelector/","result":{"data":{"mdx":{"fields":{"title":"Subscriptions","editLink":""},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Subscriptions\",\n  \"order\": 4\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"createsubscriptionid-onsubscribe-onunsubscribe-oninputschanged-onselectorcalled-selector-setter\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#createsubscriptionid-onsubscribe-onunsubscribe-oninputschanged-onselectorcalled-selector-setter\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"createSubscription(id?, onSubscribe, onUnsubscribe, onInputsChanged, onSelectorCalled): \", \"[selector, setter]\"), mdx(\"p\", null, \"You can actually put data streams (like web sockets) in your dependency graph along side selectors and async selectors. It works by monitor calls to it and if an action was dispatched, but the selector wasn't called, that means no component is subscribed. Then you can destroy the data stream until another component subscribes.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { createSubscription } from \\\"async-selector-kit\\\";\\n\\nconst data = {};\\n\\nconst getFormat = (state) => state.format;\\n\\nconst [getTime, setter, getLastUpdate] = createSubscription(\\n  {\\n    id: \\\"sub\\\",\\n    onSubscribe: (inputs, store) => {\\n      data.interval = setInterval(() => {\\n        const format = getFormat(store.getState());\\n        if (format === \\\"unix\\\") {\\n          setter(Date.now() / 1000);\\n        } else {\\n          setter(Date.now());\\n        }\\n      });\\n    },\\n    onUnsubscribe: (inputs, store) => {\\n      clearInterval(data.interval);\\n    },\\n    onInputsChanged: (current, previous) => {},\\n    onSelectorCalled: (state) => {},\\n  },\\n  [getFormat]\\n);\\n\")), mdx(\"h2\", {\n    \"id\": \"createthrottledselectorselectors-func-throttler-id-selector\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#createthrottledselectorselectors-func-throttler-id-selector\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"createThrottledSelector(selectors, func, throttler, id?): selector\"), mdx(\"p\", null, \"A powerful technique async selectors allow you to use is delaying expensive calculations so they don't negative effect user experience. This function is very similar to reselect's createSelector except you pass in an additional throttle function. When the expensive function is ready to be computed, a re-render action will be dispatched. If the function is very expensive, you may want to consider using an async function that calls a web worker instead so it is non-blocking.\"), mdx(\"h3\", {\n    \"id\": \"example\"\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#example\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }), mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { createThrottledSelector } from \\\"async-selector-kit\\\";\\nimport _ from \\\"underscore\\\";\\n\\nfunction expensiveFunction(text) {\\n  for (let i = 0; i < 10000; i++) {\\n    text += text;\\n  }\\n  return text;\\n}\\n\\n// The calculation will only be triggered if searchText hasn't changed for 500ms (the first calculation will be done no matter what)\\n// the selector will return the last computed value\\nexport const text10000 = createThrottledSelector(\\n  [(state) => state.searchText],\\n  expensiveFunction,\\n  (f) => _.debounce(f, 500),\\n  \\\"myThrottledSelector\\\"\\n);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#createsubscriptionid-onsubscribe-onunsubscribe-oninputschanged-onselectorcalled-selector-setter","title":"createSubscription(id?, onSubscribe, onUnsubscribe, onInputsChanged, onSelectorCalled): selector, setter"},{"url":"#createthrottledselectorselectors-func-throttler-id-selector","title":"createThrottledSelector(selectors, func, throttler, id?): selector","items":[{"url":"#example","title":"Example"}]}]}}},"pageContext":{"id":"0641eb4c-7edc-58dc-ad69-7a24d98ee90c"}},"staticQueryHashes":["1022386572","1122327541","1339625561","2140385554","3442269102","3597609067"]}